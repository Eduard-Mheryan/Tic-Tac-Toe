let fields=[
null,
null,
null,
null,
null,
null,
null,
null,
null,
];      

const WINNING_COMBINATIONS = [
  [0, 1, 2], [3, 4, 5], [6, 7, 8], // horizontal
  [0, 3, 6], [1, 4, 7], [2, 5, 8], // vertical
  [0, 4, 8], [2, 4, 6], // diagonal
];
      document.createElement('p')    
   
  let currentPlayer='circle'// es ist eine neue Variable,welcher den wert null kriegt//

   function init (){
    render();  
   }


function render() {
    
        const contentDiv = document.getElementById('content');
    
        // Generate table HTML
            let tableHtml = '<table>';  // hier schafft man eine Tabelle
            for (let i = 0; i < 3; i++) {  //for Loop für tr//
            tableHtml += '<tr>'; //+= Bedeutet, dass in jeder Schleife tr hinzugefügt. 
            for (let j = 0; j < 3; j++) {
                const index = i * 3 + j; // hier ist index jeder Zelle unserer Tabelle.
                let symbol = ''; // hier ist Symbol mit String kein Wert
                if (fields[index] === 'circle') { // index wird fields eingebunden.
                    symbol = generateCircleSVG();// Symbol === hiere der unteren Function 
                } else if (fields[index] === 'cross') {
                    symbol = generateCrossSVG(); 
                }
                         // hier this parameter bedeute jedes Tdelement. 
                         //index Parameter ist the same index as index in this function.
                         // Ziel ist  der indexparamet,da in der onclick Function noch mal aufrufen.
            tableHtml += `<td onclick="handleClick(this, ${index})">${symbol}</td>`;
            }
                 tableHtml += '</tr>';
        }
                 tableHtml += '</table>';
    
        // Set table HTML to contentDiv
             contentDiv.innerHTML = tableHtml;
    }     


        function restartTheGame(){
          fields=[
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            ]; 
            render(); 
        }

    function handleClick(cell, index) {
        if (fields[index] === null) {  // hier ist das Spiel an der Anfangsphase  
            fields[index] = currentPlayer;//ternary Operator heißt es.Es ist das gleiche wie if Else Abfrage. 
            cell.innerHTML = currentPlayer === 'circle' ? generateCircleSVG() : generateCrossSVG();
            cell.onclick = null;//nach einem Click kann man nicht nochmal aufclicken.Wert ist 0.
            currentPlayer = currentPlayer === 'circle' ? 'cross' : 'circle';

            if (isGameFinished()) {
                const winCombination =getWinningCombination();
                drawWinningLine(winCombination);
            
            
            
            } 

        }
    };  

        

     function isGameFinished() {
     return fields.every((field) => field !== null) || /*es ist oder Zeichen*/getWinningCombination()!== null;
                      //dieses Zeichen bedeutet hier return kurzschreibweise!!
                      //every method bringt nur true oder false zurück
}

function getWinningCombination() {
    for (let i = 0; i < WINNING_COMBINATIONS.length; i++) {
    const [a, b, c] = WINNING_COMBINATIONS[i]; //[0,1,2] a,b,c ist hier winningcomination Zahlen oben.
    if (fields[a] === fields[b] && fields[b] === fields[c] && fields[a] !== null) {
             return WINNING_COMBINATIONS[i];   
       }
       }  
          return null;  
}   
   
   
function drawWinningLine(combination) {
  const lineColor = '#ffffff';
  const lineWidth = 5;
                             // durch den Befehl kann man 
  const startCell = document.querySelectorAll('td')[combination[0]];
  const endCell = document.querySelectorAll('td')[combination[2]];

  const startRect = startCell.getBoundingClientRect();
  const endRect = endCell.getBoundingClientRect();

  const contentRect = document.getElementById('content').getBoundingClientRect();

  const lineLength = Math.sqrt(
    Math.pow(endRect.left - startRect.left, 2) + Math.pow(endRect.top - startRect.top, 2)
  );
  const lineAngle = Math.atan2(endRect.top - startRect.top, endRect.left - startRect.left);

  const line = document.createElement('div');
  line.style.position = 'absolute';
  line.style.width = `${lineLength}px`;
  line.style.height = `${lineWidth}px`;
  line.style.backgroundColor = lineColor;
  line.style.top = `${startRect.top + startRect.height / 2 - lineWidth / 2 - contentRect.top}px`;
  line.style.left = `${startRect.left + startRect.width / 2 - contentRect.left}px`;
  line.style.transform = `rotate(${lineAngle}rad)`;
  line.style.transformOrigin = 'top left';

  document.getElementById('content').appendChild(line);
}

   

         
 
 
  

function generateCircleSVG() {
    const color = '#00B0EF';
    const width = 70;
  
  }
      
    
    


    function generateCircleSVG() {
        const color = '#00B0EF';
        const width = 70;
        const height = 70; 
           
        
         
    
        return `<svg width="${width}" height="${height}">
                  <circle cx="35" cy="35" r="30" stroke="${color}" stroke-width="5" fill="none">
                    <animate attributeName="stroke-dasharray" from="0 188.5" to="188.5 0" dur="0.2s" fill="freeze" />
                  </circle>
                </svg>`;

    }
      

    function generateCrossSVG() {
        const color = '#FFC000';
        const width = 70;
        const height = 70;
    
        const svgHtml = `
          <svg width="${width}" height="${height}">
            <line x1="0" y1="0" x2="${width}" y2="${height}"
              stroke="${color}" stroke-width="5">
              <animate attributeName="x2" values="0; ${width}" dur="200ms" />
              <animate attributeName="y2" values="0; ${height}" dur="200ms" />
            </line>
            <line x1="${width}" y1="0" x2="0" y2="${height}"
              stroke="${color}" stroke-width="5"> 
              <animate attributeName="x2" values="${width}; 0" dur="200ms" />
              <animate attributeName="y2" values="0; ${height}" dur="200ms" />
            </line>
          </svg>
        `;
    
        return svgHtml;
    }     


          